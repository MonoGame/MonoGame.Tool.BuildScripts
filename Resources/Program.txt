using System.Diagnostics;
using System.Runtime.InteropServices;

for(int i = 0; i < args.Length; i++)
{
    if(args[i].Contains(" "))
    {
        args[i] = $"\"{args[i]}\"";
    }
}

string arguments = string.Join(" ", args);
string baseDirectory = AppContext.BaseDirectory;

ProcessStartInfo startInfo = new ProcessStartInfo()
{
    Arguments = arguments,
    UseShellExecute = false
};

if(RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
{
    startInfo.FileName = Path.Combine(baseDirectory, "binaries", "windows-x64", "{ExecutableName}");
}
else if(RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
{
    startInfo.FileName = Path.Combine(baseDirectory, "binaries", "linux-x64", "{ExecutableName}");
}
else if(RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
{
    var osxPath = Path.Combine(baseDirectory, "binaries", "osx", "{ExecutableName}");
    if(!File.Exists(osxPath))
    {
        osxPath = RuntimeInformation.ProcessArchitecture switch
        {
            Architecture.Arm or Architecture.Arm64 => Path.Combine(baseDirectory, "binaries", "osx-arm64", "{ExecutableName}"),
            _ => Path.Combine(baseDirectory, "binaries", "osx-x64", "{ExecutableName}")
        };
    }
    startInfo.FileName = osxPath;
}

using (Process? process = Process.Start(startInfo))
{
    if (process is not null)
    {
        await process.WaitForExitAsync();
    }
}
